import time
from datetime import timedelta

@app.route('/')
def index():
    # Record the start time for server runtime calculation
    start_time = time.time()
    
    try:
        # Get IP information
        ip_info = requests.get('https://ipinfo.io/json').json()
        
        # Get RAM usage using os (cross-platform)
        ram_info = {}
        try:
            system = platform.system().lower()
            
            if system == "linux":
                # Linux memory info
                with open('/proc/meminfo') as f:
                    meminfo = f.read()
                total_kb = int(meminfo.split('MemTotal:')[1].split()[0])
                free_kb = int(meminfo.split('MemFree:')[1].split()[0])
                available_kb = int(meminfo.split('MemAvailable:')[1].split()[0])
                
                total = total_kb / (1024 * 1024)  # Convert KB to GB
                free = free_kb / (1024 * 1024)
                available = available_kb / (1024 * 1024)
                used = total - free
                percent = (used / total) * 100
                
            elif system == "darwin":  # macOS
                # macOS memory info
                total_bytes = int(os.popen('sysctl hw.memsize').read().split()[-1])
                vm_stat = os.popen('vm_stat').read().split()
                free_pages = int(vm_stat[vm_stat.index('free:')+1][:-1])
                page_size = 4096  # bytes
                
                total = total_bytes / (1024 ** 3)  # Convert bytes to GB
                free = (free_pages * page_size) / (1024 ** 3)
                used = total - free
                percent = (used / total) * 100
                available = free
                
            elif system == "windows":
                # Windows memory info
                total_bytes = int(os.popen('wmic memorychip get capacity').read().split()[1])
                free_bytes = int(os.popen('wmic OS get FreePhysicalMemory /Value').read().split('=')[1]) * 1024
                
                total = total_bytes / (1024 ** 3)  # Convert bytes to GB
                free = free_bytes / (1024 ** 3)
                used = total - free
                percent = (used / total) * 100
                available = free
                
            else:
                raise Exception(f"Unsupported OS: {system}")
                
            ram_info = {
                "total": f"{total:.2f}GB",
                "used": f"{used:.2f}GB",
                "free": f"{free:.2f}GB",
                "available": f"{available:.2f}GB",
                "usage_percentage": f"{percent:.1f}%"
            }
            
        except Exception as ram_error:
            ram_info = {
                "error": f"RAM info unavailable: {str(ram_error)}",
                "available": False
            }

        # Calculate server runtime (uptime)
        uptime_seconds = time.time() - start_time
        uptime_str = str(timedelta(seconds=uptime_seconds)).split('.')[0]  # Remove microseconds

        return jsonify({
            "status": 200,
            "success": True,
            "creator": "GiftedTech",
            "message": "Ytdlp Api is Running",
            "ip_info": {
                "ipAddress": ip_info.get('ip'),
                "country": ip_info.get('country'),
                "city": ip_info.get('city'),
                "region": ip_info.get('region'),
                "location": ip_info.get('loc'),
                "postal_code": ip_info.get('postal'),
                "net_isp": ip_info.get('org'),
                "timezone": ip_info.get('timezone')
            },
            "memory_info": ram_info,
            "platform_info": {
                "system": platform.system(),
                "release": platform.release(),
                "machine": platform.machine()
            },
            "server_runtime": uptime_str
        })

    except Exception as e:
        # Calculate runtime even if there's an error
        uptime_seconds = time.time() - start_time
        uptime_str = str(timedelta(seconds=uptime_seconds)).split('.')[0]
        
        return jsonify({
            "status": 200,
            "success": True,
            "creator": "GiftedTech",
            "message": "Ytdlp Api is Running",
            "warning": "Could not fetch system information",
            "error": str(e),
            "server_runtime": uptime_str
        })
